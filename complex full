from mpmath import *
mp.dps = 25; mp.pretty = True
class complex:
    def __init__(self, x, y):
        self.r = x
        self.i = y
        self.mode = 'norm'
    def to_alg(self):
        self.mode='norm'
    def to_trig(self):
        self.mode='trig'
        self.tm=(self.r*self.r+self.i*self.i)**0.5
        self.tr=self.r/((self.i*self.i+self.r*self.r)**0.5)
        self.ti = self.i/((self.i*self.i+self.r*self.r)**0.5)
    def __sub__(self, a):
        s = complex(0, 0)
        s.r = self.r - a.r
        s.i = self.i - a.i
        return (s)
    def __add__(self, a):
        s = complex(0, 0)
        s.r = self.r + a.r
        s.i = self.i + a.i
        return (s)
    def tmodule(self):
        a=float
        self.tm=(self.r*self.r+self.i*self.i)**0.5
        a=self.tm
        return(a)
    def phi(self):
        b=float
        self.tr=self.r/((self.i*self.i+self.r*self.r)**0.5)
        b=asin(self.tr)
        b=degrees(b)
        return(b)
    def __mul__(self, a):
        s = complex(0, 0)
        s.mode='norm'
        if (a.i == 0):
            s.r = self.r * a.r
            s.i = self.i * a.r
        else:
            s.r = (self.r * a.r) - (self.i * a.i)
            s.i = (self.r * a.i) + (a.r * self.i)
        return (s)
    def __pow__(self,n):
        if self.mode == 'norm':
            self.to_trig()
        self.tm=self.tm**n
        self.tr=cos(n*asin(self.tr))
        self.ti=sin(n*acos(self.ti))
    def __truediv__(self, a):
        s = complex(0, 0)
        if (a.i == 0):
            s.r = self.r / a.r
            s.i = self.i / a.r
        else:
            s.r = ((self.r * a.r) - (self.i * a.i * (-1))) / ((a.r) ** 2 + 1)
            s.i = ((self.r * a.i * (-1)) + (a.r * self.i)) / ((a.r) ** 2 + 1)
        return (s)
    def sq(self,n):
        n=int(n)
        if self.mode == 'norm':
            self.to_trig()
        for i in range(0,n):
            self.rm = self.tm ** n
            self.rr = cos((asin(self.tr)+asin(self.tr)*2*i)/n)
            self.ri = sin((asin(self.tr)+asin(self.tr)*2*i)/n)
            print('|',self.rm,'|*(',self.rr,'i*',self.ri,')')
    def __str__(self):
        if self.mode=='norm':
            return '{} + i*{}'.format(self.r, self.i)
        else:
            return '|{}|*({}+i*{})'.format(self.tm, self.tr, self.ti)
